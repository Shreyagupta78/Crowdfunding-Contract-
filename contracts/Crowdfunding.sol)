// SPDX-License-Identifier: MIT
pragma solidity ^0.8.17;

contract Crowdfunding {
    address public owner;
    uint256 public deadline;
    uint256 public goalAmount;
    uint256 public totalRaised;
    bool public isGoalReached;
    mapping(address => uint256) public contributions;

    constructor(uint256 _duration, uint256 _goalAmount) {
        owner = msg.sender;
        deadline = block.timestamp + _duration;
        goalAmount = _goalAmount;
    }

    function contribute() external payable {
        require(block.timestamp < deadline, "Crowdfunding ended");
        require(msg.value > 0, "Must send ETH to contribute");

        contributions[msg.sender] += msg.value;
        totalRaised += msg.value;
        if (totalRaised >= goalAmount) {
            isGoalReached = true;
        }
    }

    function withdraw() external {
        require(msg.sender == owner, "Only owner can withdraw");
        require(block.timestamp >= deadline, "Campaign still active");
        require(isGoalReached, "Funding goal not reached");

        payable(owner).transfer(address(this).balance);
    }

    function refund() external {
        require(block.timestamp >= deadline, "Campaign still active");
        require(!isGoalReached, "Goal was reached, no refunds");

        uint256 contributed = contributions[msg.sender];
        require(contributed > 0, "No contributions to refund");

        contributions[msg.sender] = 0;
        payable(msg.sender).transfer(contributed);
    }

    function getCampaignStatus() external view returns (string memory) {
        if (block.timestamp < deadline) {
            return "Active";
        } else if (isGoalReached) {
            return "Successful";
        } else {
            return "Failed";
        }
    }
}
